{"version":3,"sources":["/Users/yangqianjun/Documents/project/e-kit/ekit/packages/event-center/src/index.ts","/Users/yangqianjun/Documents/project/e-kit/ekit/packages/event/src/EventWrapper.tsx","/Users/yangqianjun/Documents/project/e-kit/ekit/packages/event/README.mdx"],"names":["EventWrapper","props","observerList","on","once","emit","event","callback","EventCenter","observer","removeListener","push","info","this","forEach","Cp","originProps","React","PureComponent","EventWrapperDecorator","layoutProps","MDXContent","components","mdxType","parentName","of","isMDXComponent"],"mappings":"kLAQA,E,uCAAA,kFAEA,UAAe,IAAI,W,m3CCeZ,IAAMA,EAAb,kDAKE,WAAmBC,GAA+B,IAAD,8BAC/C,cAAMA,IALDC,kBAI0C,IAH1CC,QAG0C,IAF1CC,UAE0C,IAD1CC,UAC0C,EAE/C,EAAKH,aAAe,GACpB,EAAKC,GAAK,SAACG,EAAeC,GACxBC,IAAYL,GAAGG,EAAOC,GACtB,IAAME,EAAW,kBAAMD,IAAYE,eAAeJ,EAAOC,IAEzD,OADA,EAAKL,aAAaS,KAAKF,GAChBA,GAET,EAAKL,KAAO,SAACE,EAAeC,GAC1BC,IAAYJ,KAAKE,EAAOC,GACxB,IAAME,EAAW,kBAAMD,IAAYE,eAAeJ,EAAOC,IAEzD,OADA,EAAKL,aAAaS,KAAKF,GAChBA,GAET,EAAKJ,KAAO,SAACC,EAAeM,GAC1BJ,IAAYH,KAAKC,EAAOM,IAhBqB,EALnD,mEA0BIC,KAAKX,aAAaY,SAAQ,SAAAL,GAAQ,OAAIA,SA1B1C,+BA6BmB,IAAD,EACcI,KAAKZ,MAAzBc,EADM,EACNA,GAAIC,EADE,EACFA,YACZ,OAAO,kBAACD,EAAD,iBAAQC,EAAR,CAAqBb,GAAIU,KAAKV,GAAIC,KAAMS,KAAKT,KAAMC,KAAMQ,KAAKR,YA/BzE,GAAkCY,IAAMC,eAmCzB,SAASC,EACtBJ,GAEA,OAAO,SAACd,GAAD,OAAgB,kBAAC,EAAD,CAAcc,GAAIA,EAAIC,YAAaf,K,uZCrD5D,IAAMmB,EAAc,GAIL,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGrB,EACF,8BACD,OAAO,YALS,UAKT,iBAAemB,EAAiBnB,EAAhC,CAAuCqB,WAAYA,EAAYC,QAAQ,cAE5E,iBAAQ,CACN,GAAM,SADR,SAGA,yEACA,uBAAK,kCAAMC,WAAW,OAAU,IAA3B,2BAEL,0NACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,mBADZ,6BAIL,sCACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,mBADZ,kCAKL,iBAAQ,CACN,GAAM,SADR,UAGA,iBAAQ,CACN,GAAM,iBADR,kBAGA,yMACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,kHAQL,iBAAQ,CACN,GAAM,qBADR,uBAGA,kGACA,iBAAQ,CACN,GAAM,sBADR,sBAGA,YAAC,IAAD,CAAOC,GAAIzB,EAAcuB,QAAQ,UACjC,iBAAQ,CACN,GAAM,gBADR,gBAGA,uBAAK,kCAAMC,WAAW,OAAU,CAC5B,UAAa,gBADZ,if,+KA2BTH,EAAWK,gBAAiB","file":"static/js/packages-event-readme.dcda0cf7.js","sourcesContent":["/**\n * @file: 拆分ec\n * @author: yangqianjun\n * @Date: 2020-01-08 18:02:05\n * @LastEditors: yangqianjun\n * @LastEditTime: 2020-01-08 18:10:58\n */\n\nimport EventEmitter from 'eventemitter3';\n\nexport default new EventEmitter<string>();\n","import React from 'react';\n\nimport { EventCenter } from './event';\n\n// own props\nexport interface IEventWrapperProps extends React.Props<any> {\n  on: Callback;\n  once: Callback;\n  emit: Emit;\n}\n\ninterface IEventWrapperHOCProps {\n  /**\n   * 被装饰的组件\n   */\n  Cp: React.SFC | React.ComponentClass;\n  /**\n   * 被装饰组件的Props\n   */\n  originProps: any;\n}\n\ntype Callback = (event: string, info: any) => any;\ntype Emit = (event: string, info: any) => any;\n\nexport class EventWrapper extends React.PureComponent<IEventWrapperHOCProps> {\n  public observerList: any[];\n  public on: Callback;\n  public once: Callback;\n  public emit: Emit;\n  public constructor(props: IEventWrapperHOCProps) {\n    super(props);\n    this.observerList = [];\n    this.on = (event: string, callback: Callback) => {\n      EventCenter.on(event, callback);\n      const observer = () => EventCenter.removeListener(event, callback);\n      this.observerList.push(observer);\n      return observer;\n    };\n    this.once = (event: string, callback: Callback) => {\n      EventCenter.once(event, callback);\n      const observer = () => EventCenter.removeListener(event, callback);\n      this.observerList.push(observer);\n      return observer;\n    };\n    this.emit = (event: string, info: any) => {\n      EventCenter.emit(event, info);\n    };\n  }\n\n  public componentWillUnmount() {\n    this.observerList.forEach(observer => observer());\n  }\n\n  public render() {\n    const { Cp, originProps } = this.props;\n    return <Cp {...originProps} on={this.on} once={this.once} emit={this.emit} />;\n  }\n}\n\nexport default function EventWrapperDecorator<T extends React.ComponentClass | React.SFC>(\n  Cp: T\n): any {\n  return (props: any) => <EventWrapper Cp={Cp} originProps={props} />;\n}\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { Props } from 'docz';\nimport { EventWrapper } from './src/EventWrapper.tsx';\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"event\"\n    }}>{`Event`}</h1>\n    <p>{`观察者模式封装。`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`npm i -S @ekit/event\n`}</code></pre>\n    <p>{`所有事件共享一个观察者模式，所以请确保事件名命名唯一性，建议使用:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`e:moduleName.eventName\n`}</code></pre>\n    <p>{`例如:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`e:User.login\ne:User.logout\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"2-api\"\n    }}>{`2. API`}</h2>\n    <h2 {...{\n      \"id\": \"--21-useevent\"\n    }}>{`- 2.1 useEvent`}</h2>\n    <p>{`使用 useEvent Hooks，实现了 Emit & Callback 类型的打通，以及事件的自动解除绑定。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { useEvent } from '@ekit/event';\n\n...\nconst [emit, off] = useEvent('e:eventName', callback);\n...\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"--22-eventwrapper\"\n    }}>{`- 2.2. EventWrapper`}</h2>\n    <p>{`对于 Class 组件使用的装饰器。`}</p>\n    <h3 {...{\n      \"id\": \"eventwrapper-props\"\n    }}>{`EventWrapper Props`}</h3>\n    <Props of={EventWrapper} mdxType=\"Props\" />\n    <h3 {...{\n      \"id\": \"示例\"\n    }}>{`示例`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import React from 'react';\nimport EventWrapperDecorator, { EventCenter, IEventWrapperProps } from '@ekit/event';\n\n@EventWrapperDecorator\nclass A extends React.Component<{} & IEventWrapperProps> {\n  public constructor(props) {\n    super(props);\n    props.on('LOAD', () => console.log('load'));\n  }\n\n  public componentDidMount() {\n    this.props.emit('LOAD');\n    // or 全局广播\n    EventCenter.emit('LOAD');\n  }\n\n  public render() {\n    return null;\n  }\n}\n`}</code></pre>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}