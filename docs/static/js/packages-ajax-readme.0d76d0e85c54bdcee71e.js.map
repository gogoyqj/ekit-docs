{"version":3,"sources":["/Users/yangqianjun/Documents/project/e-kit/ekit/packages/ajax/__tests__/Doc.tsx","/Users/yangqianjun/Documents/project/e-kit/ekit/packages/ajax/README.mdx"],"names":["ResultInterface","React","Component","ExtraFetchParamsInterface","ParamsInterface","FetchInterface","layoutProps","MDXContent","components","props","mdxType","parentName","of","isMDXComponent"],"mappings":"6sBAgBaA,EAAb,4HAAqCC,IAAMC,W,kNAEpC,IAAMC,EAAb,4HAA+CF,IAAMC,W,4NAC9C,IAAME,EAAb,4HAAqCH,IAAMC,W,kNACpC,IAAMG,EAAb,4HAAoCJ,IAAMC,W,iNCL1C,IAAMI,EAAc,GAIL,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YALS,UAKT,iBAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAE5E,iBAAQ,CACN,GAAM,QADR,QAGA,gJACA,uBAAK,kCAAMC,WAAW,OAAU,CAC5B,UAAa,mBADZ,0BAIL,iBAAQ,CACN,GAAM,SADR,UAGA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,qCAIL,iBAAQ,CACN,GAAM,aADR,eAGA,iBAAQ,CACN,GAAM,UADR,QAGA,4GACA,YAAC,IAAD,CAAOC,GAAIP,EAAgBK,QAAQ,UACnC,iBAAQ,CACN,GAAM,iBADR,oBAGA,8EAA0B,+BAAGC,WAAW,KAAQ,CAC5C,KAAQ,2CADc,sBAA1B,yCAGA,iBAAQ,CACN,GAAM,mCADR,mCAGA,8DAA8B,+BAAGA,WAAW,KAAQ,CAChD,KAAQ,yCADkB,qBAG9B,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,+DAIL,sFACA,YAAC,IAAD,CAAOC,GAAIR,EAAiBM,QAAQ,UACpC,iBAAQ,CACN,GAAM,iCADR,iCAGA,0HACA,YAAC,IAAD,CAAOE,GAAIT,EAA2BO,QAAQ,UAC9C,iBAAQ,CACN,GAAM,WADR,WAGA,uBAAK,kCAAMC,WAAW,OAAU,CAC5B,UAAa,gBADZ,8DAOL,iBAAQ,CACN,GAAM,sCADR,uCAGA,6GAA2B,+BAAGA,WAAW,KAAQ,CAC7C,KAAQ,+CADe,0BAA3B,UAGA,iBAAQ,CACN,GAAM,uCADR,uCAGA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,+JASL,YAAC,IAAD,CAAOC,GAAIZ,EAAiBU,QAAQ,UACpC,iBAAQ,CACN,GAAM,gBADR,gBAGA,uBAAK,kCAAMC,WAAW,OAAU,CAC5B,UAAa,gBADZ,+SAQL,iBAAQ,CACN,GAAM,6CADR,8CAGA,qLACA,qEACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,wEAQL,kHACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,8IAML,iBAAQ,CACN,GAAM,sCADR,wCAGA,6VACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,4IAML,iBAAQ,CACN,GAAM,uCADR,yCAGA,wJACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,sWAcL,iBAAQ,CACN,GAAM,aADR,cAGA,2FACA,iBAAQ,CACN,GAAM,oCADR,sCAGA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,wZAiBL,iBAAQ,CACN,GAAM,6BADR,+BAGA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,mgB,8KAuBTJ,EAAWM,gBAAiB","file":"static/js/packages-ajax-readme.fe6b00bc.js","sourcesContent":["/**\n * @file: 为使用 docz Props 而 fake\n * @author: yangqianjun\n * @Date: 2019-12-18 16:25:12\n * @LastEditors: yangqianjun\n * @LastEditTime: 2020-01-08 18:48:37\n */\nimport React from 'react';\nimport {\n  TkitAbstractAjaxResult,\n  WrappedFetchParams,\n  WrappedFetch,\n  ExtraFetchParams,\n  NonStandardAjaxPromise\n} from '../src';\n\nexport class ResultInterface extends React.Component<TkitAbstractAjaxResult<any>> {}\n\nexport class ExtraFetchParamsInterface extends React.Component<ExtraFetchParams> {}\nexport class ParamsInterface extends React.Component<WrappedFetchParams> {}\nexport class FetchInterface extends React.Component<typeof WrappedFetch.prototype> {}\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { Props } from 'docz';\nimport {\n  ResultInterface,\n  ParamsInterface,\n  FetchInterface,\n  ExtraFetchParamsInterface\n} from './__tests__/Doc.tsx';\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"ajax\"\n    }}>{`Ajax`}</h1>\n    <p>{`Tkit 规范 Ajax 模块，基于 Axios 封装，支持 RESTful 和 Graphql。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`npm i -S @ekit/ajax\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"2-api\"\n    }}>{`2. API`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import ajax from '@ekit/ajax';\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"--21-ajax\"\n    }}>{`- 2.1. Ajax`}</h2>\n    <h3 {...{\n      \"id\": \"ajax-1\"\n    }}>{`Ajax`}</h3>\n    <p>{`Ajax 实例提供了以下方法和属性：`}</p>\n    <Props of={FetchInterface} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"--22-ajaxajax\"\n    }}>{`- 2.2. Ajax.ajax`}</h2>\n    <p>{`Ajax 实例的 ajax 方法接收 `}<a parentName=\"p\" {...{\n        \"href\": \"#wrappedfetchparams-%E6%8E%A5%E5%8F%A3\"\n      }}>{`WrappedFetchParams`}</a>{` 类型的参数：`}</p>\n    <h3 {...{\n      \"id\": \"wrappedfetchparams-接口\"\n    }}>{`WrappedFetchParams 接口`}</h3>\n    <p>{`WrappedFetchParams 继承自 `}<a parentName=\"p\" {...{\n        \"href\": \"#extrafetchparams-%E6%8E%A5%E5%8F%A3\"\n      }}>{`ExtraFetchParams`}</a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`interface WrappedFetchParams extends ExtraFetchParams {}\n`}</code></pre>\n    <p>{`WrappedFetchParams 包含以下属性：`}</p>\n    <Props of={ParamsInterface} mdxType=\"Props\" />\n    <h3 {...{\n      \"id\": \"extrafetchparams-接口\"\n    }}>{`ExtraFetchParams 接口`}</h3>\n    <p>{`WrappedFetchParams 继承的 ExtraFetchParams 包含以下属性：`}</p>\n    <Props of={ExtraFetchParamsInterface} mdxType=\"Props\" />\n    <h3 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`ajax.ajax({\n  method: 'GET',\n  url: '//xxxx.com'\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"--23-tkit-规范接口\"\n    }}>{`- 2.3 Tkit 规范接口`}</h2>\n    <p>{`响应数据结构遵循 Tkit 约定的结构 `}<a parentName=\"p\" {...{\n        \"href\": \"#tkitabstractajaxresult-%E6%8E%A5%E5%8F%A3\"\n      }}>{`TkitAbstractAjaxResult`}</a>{`：`}</p>\n    <h3 {...{\n      \"id\": \"tkitabstractajaxresult-接口\"\n    }}>{`TkitAbstractAjaxResult 接口`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`interface TkitAbstractAjaxResult<R> {\n  code?: number;\n  message?: null | string;\n  result: R;\n}\ntype TkitAjaxResult = TkitAbstractAjaxResult<any>;\n`}</code></pre>\n    <Props of={ResultInterface} mdxType=\"Props\" />\n    <h3 {...{\n      \"id\": \"示例\"\n    }}>{`示例`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import ajax, { TkitAjaxResult, TkitAjaxFunction, AjaxPromise } from '@ekit/ajax';\n\nconst res: TkitAjaxResult = { code: 0, result: { id: 2 } };\nconst fetchData: TkitAjaxFunction = async () => res;\nconst fetchData2: () => AjaxPromise<{ code: number; result: { id: number } }> = async () => res;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"--24-其他接口规范\"\n    }}>{`- 2.4 其他接口规范`}</h2>\n    <p>{`响应数据结构不遵循 Tkit 规范的接口，请按照以下步骤操作。`}</p>\n    <p>{`首先配置 tsconfig.json：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"paths\": {\n    \"@ajax\": [\"src/utils/standard-ajax\"]\n  }\n}\n`}</code></pre>\n    <p>{`然后实现自定义的 standard-ajax.ts，比如：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`export * from '@ekit/ajax';\nexport { NonStandardAjaxPromise as AjaxPromise } from '@ekit/ajax';\nexport { default } from '@ekit/ajax';\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"--25-ajax-全局事件\"\n    }}>{`- 2.5. Ajax 全局事件`}</h2>\n    <p>{`Tkit Ajax 默认开启的自动错误捕获里（可通过设置 Ajax 示例 autoCatch false 关闭），当捕获到 401、403 错误的时候，会通过 @ekit/event 抛出全局事件。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { EventCenter } from '@ekit/event';\n\nEventCenter.on('common.user.status', (res: { code?: number; message?: string }) => {});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"--26-axios-全局配置\"\n    }}>{`- 2.6. Axios 全局配置`}</h2>\n    <p>{`我们可以对 Ajax 使用的 Axios 实例添加一些全局设置。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import axios from '@ekit/ajax/lib/axios';\n\n/** 配置请求头 */\naxios.defaults.headers = {\n  ['X-TOKEN']: 'something secret'\n};\n\nimport qs from 'qs';\n\n/** 配置如何格式化query里的数组 */\naxios.defaults.paramsSerializer = (params) => qs.stringify(params, { arrayFormat: 'repeat' });\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"3-graphql\"\n    }}>{`3. Graphql`}</h2>\n    <p>{`基于 graphql-request 封装的 Axios 版本`}</p>\n    <h2 {...{\n      \"id\": \"--31-配置-graphql-client\"\n    }}>{`- 3.1. 配置 Graphql Client`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { GraphQLClient } from '@ekit/ajax/lib/graphql';\nimport { getSdk } from '@src/models/service';\n\nconst isProd = process.env.NODE_ENV !== 'development';\nconst endpoint = isProd ? '/graphql' : 'http://127.0.0.1/graphql';\n\nexport const Client = new GraphQLClient(endpoint, {\n  headers: {\n    'Access-Control-Allow-Origin': '*'\n  }\n});\n\n/** xx services */\nexport default getSdk(Client);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"--32-service-示例\"\n    }}>{`- 3.2. Service 示例`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { GraphQLClient } from '@ekit/ajax';\nimport { print } from 'graphql';\nimport gql from 'graphql-tag';\nimport { AjaxPromise, ExtraFetchParams } from '@ekit/ajax';\n\nexport function getSdk(client: GraphQLClient) {\n  return {\n    docList(\n      variables: DocListQueryVariables,\n      /** 用以 cancel 请求 */\n      opt?: ExtraFetchParams\n    ): AjaxPromise<DocListQueryRes> {\n      return client.request<DocListQueryRes>(print(DocListDocument), variables, opt);\n    }\n  };\n}\n`}</code></pre>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}