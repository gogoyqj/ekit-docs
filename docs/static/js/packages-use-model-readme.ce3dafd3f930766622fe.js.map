{"version":3,"sources":["/Users/yangqianjun/Documents/project/e-kit/ekit/packages/use-model/README.mdx"],"names":["layoutProps","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"iXASMA,EAAc,GAIL,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YALS,UAKT,iBAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAC5E,iBAAQ,CACN,GAAM,aADR,aAGA,4DACA,uBAAK,kCAAMC,WAAW,OAAU,IAA3B,+BAEL,iBAAQ,CACN,GAAM,MADR,MAGA,wLACA,iBAAQ,CACN,GAAM,kBADR,kBAGA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,wiBAsBL,iBAAQ,CACN,GAAM,YADR,YAGA,2EACA,iBAAQ,CACN,GAAM,oBADR,kBAGA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,oSAWL,iBAAQ,CACN,GAAM,4BADR,4BAGA,+GACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,uD,mLAQTJ,EAAWK,gBAAiB","file":"static/js/packages-use-model-readme.7ac981eb.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"use-model\"\n    }}>{`Use Model`}</h1>\n    <p>{`Tkit Hooks Model 封装。`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`npm i -S @ekit/use-model\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"mm\"\n    }}>{`MM`}</h2>\n    <p>{`通过 MM 创建集成了 Immer 局部 Hooks Model。通过 M 创建未集成 Immer 的版本。`}</p>\n    <h2 {...{\n      \"id\": \"--示例\"\n    }}>{`- 示例`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { Tction, MM, M } from '@ekit/use-model';\n\nexport const UserModel = MM({\n  namespace: 'test',\n  state: {\n    username: ''\n  },\n  reducers: {\n    doRename: (state, action: Tction<{ username: string }>) => {\n      state.username = action.payload.username;\n    }\n  },\n  effects: {\n    doFetchName: async ({ tPut }, action: Tction<{ time: number }>): Promise<{}> => {\n      const username = await new Promise((rs) => rs(\\`me\\${action.payload.time}\\`));\n      return tPut(UserModel.actions.doRename, { username });\n    }\n  }\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"usemodel\"\n    }}>{`useModel`}</h2>\n    <p>{`useModel Hooks，消费 Hooks Model。`}</p>\n    <h2 {...{\n      \"id\": \"--示例-1\"\n    }}>{`- 示例`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import { useModel, bindDispatchToAction } from '@ekit/use-model';\n\nconst MySFCComponent = (props) => {\n  const [store, actions] = useModel(UserModel, props.data);\n  return (\n    <button onClick={() => actions.doFetchName({ time: 2 })}>{store.userModel.username}</button>\n  );\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"调试工具\"\n    }}>{`调试工具`}</h2>\n    <p>{`开启 Hooks Model 开发阶段运行日志打印:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`window.__TKIT_USE_MODEL_LOGGER__ = console.log;\n`}</code></pre>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}